"use client";

let authToken: string | null = null;
let tokenExpiry: number = 0;

async function getPimAuthToken(): Promise<string | null> {
  const PIM_URL = process.env.NEXT_PUBLIC_PIM_URL;
  const PIM_LOGIN = process.env.NEXT_PUBLIC_PIM_LOGIN;
  const PIM_PASS = process.env.NEXT_PUBLIC_PIM_PASS;

  console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  console.log('üåê URL:', PIM_URL);
  console.log('üë§ LOGIN:', PIM_LOGIN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('üîí PASS:', PIM_PASS ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

  if (!PIM_URL || !PIM_LOGIN || !PIM_PASS) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PIM');
    return null;
  }

  if (authToken && Date.now() < tokenExpiry) {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω');
    return authToken;
  }

  try {
    console.log('üì° –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫:', `${PIM_URL}/sign-in/`);
    const response = await fetch(`${PIM_URL}/sign-in/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        login: PIM_LOGIN,
        password: PIM_PASS,
        remember: true
      })
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status);
    const data = await response.json();
    console.log('üìÑ –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', data);
    
    if (data.success && data.data?.access?.token) {
      authToken = data.data.access.token;
      tokenExpiry = Date.now() + 50 * 60 * 1000;
      console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return authToken;
    } else {
      console.log('‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
  } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
  }
  
  return null;
}

export async function getProductImage(productId: string | number): Promise<{url: string; width: number; height: number; type: string} | null> {
  const PIM_URL = process.env.NEXT_PUBLIC_PIM_URL;
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);
  console.log('üåê PIM_URL:', PIM_URL);
  
  if (!PIM_URL) {
    console.log('‚ùå PIM_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return null;
  }

  const token = await getPimAuthToken();
  console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', token ? '–î–∞' : '–ù–µ—Ç');
  if (!token) return null;

  try {
    console.log('üì° –ó–∞–ø—Ä–æ—Å –∫:', `${PIM_URL}/product/${productId}`);
    const response = await fetch(`${PIM_URL}/product/${productId}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    const data = await response.json();
    console.log('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
    
    const picture = data.data?.picture;
    console.log('üñºÔ∏è –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', picture);

    if (picture && picture.name) {
      const type = picture.type?.toUpperCase() || 'noType';
      const imageUrl = `https://pim.uroven.pro/pictures/originals/${picture.name}.${type}`;
      console.log('‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl);
      
      return {
        url: imageUrl,
        width: picture.sizeX || 400,
        height: picture.sizeY || 300,
        type: picture.type || 'noType'
      };
    } else {
      console.log('‚ùå –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', productId, error);
  }
  
  return null;
}


